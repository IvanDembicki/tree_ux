import 'dart:async';
import 'dart:convert';

import 'package:flutter/material.dart';

import '../tree_ux.dart';
import 'node_ux_id_map.dart';
import 'provider_ux.dart';
import 'tree_ux_library.dart';

typedef NodeUxBuilder<P extends NodeUx> = NodeUx Function(P parent);

typedef Comparator = int Function(NodeUx a, NodeUx b);

/// –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∑–ª–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π.
/// –î–µ—Ä–µ–≤–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∏–∑ JSON —Ñ–∞–π–ª–∞, —Å–æ—Å—Ç–æ—è—â–µ–≥–æ
/// –∏–∑ —É–∑–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç:
///
/// –æ–¥–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ:
/// "type" ‚Äî —Å—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∑–ª–∞
///
/// –∏ –¥–≤–∞ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö:
/// "props" ‚Äî –æ–±—ä–µ–∫—Ç, —Å–æ–¥–µ—Ä–∂–∏—â–∏–π —Å–≤–æ–π—Å—Ç–≤–∞ —É–∑–ª–∞
/// "children" ‚Äî –º–∞—Å—Å–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –ø–µ—Ä–µ—á–µ–Ω—å –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤
///
/// –ü–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å XML:
/// _type —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç NodeName
/// _props —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–ø–∏—Å–∫—É –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —É–∑–ª–∞
/// _children —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Å—Å–∏–≤—É –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤
///
/// –ü—Ä–∏–º–µ—Ä JSON –æ–ø–∏—Å–∞–Ω–∏—è:
///```json
///      {
///       "type": "ApplicationRoot",
///       "props" : {"propertyExample": "some value"},
///       "children": [
///         {
///           "type": "FirstChildExample"
///          "children": [
///           {
///             "type": "ChildOfFirstChildExample"
///           }
///         },
///         {
///           "type": "SecondChildExample"
///         },
///         {
///           "type": "ThirdChildExample"
///         }
///       ]
///      }
///```
///
/// –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∫–∞–∂–¥—ã–π —É–∑–µ–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç —Å–µ–±—è –∏
/// —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–∑–¥–∞–µ—Ç –¥–æ—á–µ—Ä–Ω–∏–µ —É–∑–ª—ã.
///
/// –ö–ª–∞—Å—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞ –∫ –¥—Ä—É–≥–∏–º —É–∑–ª–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏–π
/// –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏, –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–º–∏ –º–∞–Ω–∏–ø—É–ª–∏—Ä–æ–≤–∞—Ç—å ‚Äî –æ—Ç–∫—Ä—ã–≤–∞—Ç—å, –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å.
///
/// –ï—Å–ª–∏ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ [_setProperty] –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π,
/// [ProviderUx] –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è.

abstract class _NodeUx with TreeUxEventsMember {
  static const String _TRUE = 'true';
  static const String _FALSE = 'false';

  late Map<String, dynamic>? _tempMap;

  //  üìå  ‚ñö‚ñö‚ñö‚ñö‚ñö JSON DEFINED ‚ñö‚ñö‚ñö‚ñö‚ñö  üìå

  /// –°—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–∏–ø —É–∑–ª–∞, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ JSON –æ–ø–∏—Å–∞–Ω–∏–∏ –¥–µ—Ä–µ–≤–∞
  @protected
  String get nodeType => _nodeType;
  late String _nodeType;

  /// –ö–∞—Ä—Ç–∞ —É–∑–ª–æ–≤, –∏–º–µ—é—â–∏—Ö ID –≤ JSON –æ–ø–∏—Å–∞–Ω–∏–∏ –¥–µ—Ä–µ–≤–∞.
  static final NodeUxIdMap _idMap = NodeUxIdMap();

  /// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∑–ª–∞ –ø–æ ID
  void _registerID() => _NodeUx._idMap.registerID(this as NodeUx, _props[IID] ?? '');

  /// –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É–∑–ª–∞ –ø–æ ID
  void _removeID() => _NodeUx._idMap.removeID(_props[IID] ?? '');

  /// –ö–∞—Ä—Ç–∞ —Å–≤–æ–π—Å—Ç–≤ —É–∑–ª–∞, –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤ JSON –æ–ø–∏—Å–∞–Ω–∏–∏ –¥–µ—Ä–µ–≤–∞
  final Map<String, String> _props = {};

  //  üìå  ‚ñö‚ñö‚ñö‚ñö‚ñö HIERARCHY ACCESS ‚ñö‚ñö‚ñö‚ñö‚ñö  üìå

  /// –ü—É—Ç—å –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –æ—Ç —Ä—É—Ç–∞ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞ –≤–∏–¥–∞:
  /// /App[1]/SomePage[1]/SomeParent[4]/SomeItem[7]
  /// –≥–¥–µ —Ç–µ–∫—Å—Ç ‚Äî [_nodeType] —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ JSON –æ–ø–∏—Å–∞–Ω–∏–∏ –¥–µ—Ä–µ–≤–∞,
  /// –∞ —Ü–∏—Ñ—Ä–∞ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö ‚Äî –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä [index] –æ–±—ä–µ–∫—Ç–∞
  /// –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è.
  @protected
  String get path => '${_parent?.path}$_nodeType[$index]/';

  /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤
  int get length => _children.length;

  /// Returns `true` if there are no children.
  @protected
  bool get isEmpty => _children.isEmpty;

  /// Returns true if there is at least one child.
  @protected
  bool get isNotEmpty => _children.isNotEmpty;

  /// –ü–æ–∑–∏—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–µ—Ç–µ–π [_parent] —É–∑–ª–∞.
  int get index => _parent?._children.indexOf(this as NodeUx) ?? 0;

  /// –í–µ—Ä—Ö–Ω–∏–π —É–∑–µ–ª —Ç–µ–∫—É—â–µ–≥–æ –¥–µ—Ä–µ–≤–∞.
  @protected
  NodeUx get root => _parent?.root ?? this as NodeUx;

  /// –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ [root]
  @protected
  T getRoot<T extends NodeUx>() => root as T;

  /// –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —É–∑–µ–ª
  _NodeUx? _parent;

  /// –£–∑–µ–ª-–∞–¥–∞–ø—Ç–æ—Ä.
  /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤,
  /// –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü.
  /// –ù—É–∂–µ–Ω –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ
  /// –¥–µ—Ä–µ–≤–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
  _NodeUx? _adaptor;

  /// –ú–∞—Å—Å–∏–≤ –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤.
  /// –í –±—É–¥—É—â–µ–º –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–∏–ø –≤–∏–¥–∞: List<E extends NodeUx>>
  /// –≥–¥–µ E ‚Äî —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤ ‚Äî —ç—Ç–æ –µ—â–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞–¥–æ.
  final List<NodeUx> _children = [];
  List<NodeUx> get children => _children;

  void sort(Comparator compare) => _children.sort(compare);

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–µ–≥–æ —É–∑–ª–∞ –ø–æ ID, —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤ –≤ JSON –æ–ø–∏—Å–∞–Ω–∏–∏ –¥–µ—Ä–µ–≤–∞
  @protected
  NodeUx? getChildById(String id) => _idMap.getById(id);

  /// First child node
  @protected
  NodeUx? get firstChild => getChildAt(0);

  /// Is first
  @protected
  bool get isFirst => _parent == null ? true : index == 0;

  /// Is last
  @protected
  bool get isLast => _parent == null ? true : index == ((_parent?.length ?? 0) - 1);

  /// First sibling node
  @protected
  NodeUx get firstSibling => _parent?.getChildAt(0) ?? this as NodeUx;

  /// Last sibling node
  @protected
  NodeUx get lastSibling => _parent?.getChildAt((_parent?.length ?? 0) - 1) ?? this as NodeUx;

  /// Previous sibling node
  @protected
  NodeUx? get prevSibling => _parent?._childBefore(this as NodeUx);

  NodeUx? _childBefore(NodeUx child) {
    int position = indexOf(child) - 1;
    return getChildAt(position);
  }

  /// Next sibling node
  @protected
//  NodeUx? get nextSibling => _parent.getChildAt(_parent.indexOf(this as NodeUx) + 1);
  NodeUx? get nextSibling => _parent!._childAfter(this as NodeUx);

  NodeUx? _childAfter(NodeUx child) {
    int position = indexOf(child) + 1;
    return getChildAt(position);
  }

  /// –°–ª–µ–¥—É—é—â–∏–π –∑–∞—Ü–∏–∫–ª–µ–Ω–Ω—ã–π –¥–æ—á–µ—Ä–Ω–∏–π —É–∑–µ–ª.
  /// –ü—Ä–∏ –≤—ã–∑–æ–≤–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–∑–ª–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è
  /// –ø–µ—Ä–≤—ã–π –¥–æ—á–µ—Ä–Ω–∏–π —É–∑–µ–ª, —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –∑–∞—Ü–∏–∫–ª–∏–≤–∞—è —Å–ø–∏—Å–æ–∫
  @protected
  NodeUx? get nextCycled => nextSibling ?? _parent?.firstChild;

  /// Previous cycled child node
  /// –ü—Ä–∏ –≤—ã–∑–æ–≤–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —É–∑–ª–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è
  /// –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—á–µ—Ä–Ω–∏–π —É–∑–µ–ª, —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –∑–∞—Ü–∏–∫–ª–∏–≤–∞—è —Å–ø–∏—Å–æ–∫.
  @protected
  NodeUx? get prevCycled => prevSibling ?? _parent?.lastChild;

  /// –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—á–µ—Ä–Ω–∏–π —É–∑–µ–ª
  @protected
  NodeUx? get lastChild => getChildAt(_children.length - 1);

  /// –î–æ—á–µ—Ä–Ω–∏–π —É–∑–µ–ª –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
  @protected
  NodeUx? getChildAt(int index) => (index < 0 || index >= _children.length) ? null : _children[index];

  /// Returns the index of [child] node in children list.
  ///
  /// Searches the children list from index [start] to the end of the list.
  /// The first time an object [child] is encountered so that [child] == element,
  /// the index of element is returned.
  /// Returns -1 if [child] is not found.
  @protected
  int indexOf(NodeUx child, [int start = 0]) => _children.indexOf(child, start);

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–µ–≥–æ —É–∑–ª–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –Ω–∞—á–∏–Ω–∞—è
  /// —Å –ø–æ–∑–∏—Ü–∏–∏ [start] –≤ —Å–ø–∏—Å–∫–µ –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤.
  @protected
  T? getTypedChild<T extends NodeUx>([int start = 0]) {
    for (int i = start; i < _children.length; i++) {
      if (_children[i].runtimeType == T) return _children[i] as T;
    }
    return null;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–µ–≥–æ —É–∑–ª–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ [type] –Ω–∞—á–∏–Ω–∞—è
  /// —Å –ø–æ–∑–∏—Ü–∏–∏ [start] –≤ —Å–ø–∏—Å–∫–µ –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤.
  @protected
  NodeUx? getChildByType(Type type, [int start = 0]) {
    for (int i = start; i < _children.length; i++) {
      if (_children[i].runtimeType == type) return _children[i];
    }
    return null;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–µ–≥–æ —É–∑–ª–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤ JSON —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ —Ç–∏–ø–∞ [_nodeType]
  /// –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ–∑–∏—Ü–∏–∏ [start] –≤ —Å–ø–∏—Å–∫–µ –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤.
  @protected
  NodeUx? getChildByNodeType(String type, [int start = 0]) {
    for (int i = start; i < _children.length; i++) {
      if (_children[i]._nodeType == type) return _children[i];
    }
    return null;
  }

  //  üìå  ‚ñö‚ñö‚ñö‚ñö‚ñö DESCENDANTS ‚ñö‚ñö‚ñö‚ñö‚ñö  üìå

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ [T].
  /// –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ —É–∫–∞–∑–∞–Ω, —Ç–æ –±—É–¥–µ–Ω –≤–æ–∑–≤—Ä–∞—â–µ–Ω –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö
  /// –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤ –∏ –≤—Å–µ—Ö –∏—Ö –ø–æ—Ç–æ–º–∫–æ–≤.
  @protected
  List<T> descendants<T extends NodeUx>() => _collectDescendants();

  List<T> _collectDescendants<T extends NodeUx>([NodeUx? node, List<T>? result]) {
    result = result ?? [];
    if (node == null) {
      node = this as NodeUx;
    } else if (T == NodeUx || node is T) {
      result.add(node as T);
    }
    node._children.forEach((NodeUx child) => _collectDescendants(child, result));
    return result;
  }

  //  üìå  ‚ñö‚ñö‚ñö‚ñö‚ñö ANCESTORS ‚ñö‚ñö‚ñö‚ñö‚ñö  üìå

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —É–∑–ª–∞ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –≤—ã—à–µ –ø–æ –µ–≥–æ –∫–ª–∞—Å—Å—É [T].
  T? getTypedAncestor<T extends NodeUx>() {
    _NodeUx? visitor = _parent;
    while (visitor != null) {
      if (visitor is T) return visitor;
      visitor = visitor._parent;
    }
    return null;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —É–∑–ª–∞ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –≤—ã—à–µ –ø–æ –µ–≥–æ –∫–ª–∞—Å—Å—É [type].
  @protected
  NodeUx? getAncestorByType(Type type) => runtimeType == type ? this as NodeUx : _parent?.getAncestorByType(type);

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —É–∑–ª–∞ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –≤—ã—à–µ –ø–æ –µ–≥–æ [type] ‚Äî —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É —Ç–∏–ø—É, –∑–∞–¥–∞–Ω–Ω–æ–º—É –≤ JSON.
  @protected
  NodeUx? getAncestorByNodeType(String type) => _nodeType == type ? this as NodeUx : _parent?.getAncestorByNodeType(type);

  //  üìå  ‚ñö‚ñö‚ñö‚ñö‚ñö HIERARCHY CONTROL ‚ñö‚ñö‚ñö‚ñö‚ñö  üìå

  /// –ú–µ—Ç–æ–¥, –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–æ—á–µ—Ä–Ω–∏–º —É–∑–µ–ª –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –¥–µ—Ç–µ–π —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞.
  /// @param [child] ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º—ã–π —É–∑–µ–ª
  /// @param [notify] ‚Äî —Ñ–ª–∞–≥, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π —Ä–µ–∂–∏–º –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ View.
  /// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî true, —á—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–∑–ª–∞
  /// –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞ (–≤ —Å–ª–µ–¥—É—é—â–µ–º —Ç–∏–∫–µ).
  /// @returns <T extends [NodeUx]> ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —É–∑–µ–ª
  @protected
  T addChild<T extends NodeUx>(T child, {bool notify = true}) {
    return addChildAt(_children.length, child, needsBuild: notify);
  }

  /// Inserts the [child] at position [index] in children list.
  ///
  /// This increases the length of the list by one and shifts all objects
  /// at or after the index towards the end of the list.
  ///
  /// The list must be growable.
  /// The [index] value must be non-negative and no greater than [length].
  ///
  /// Default value of [needsBuild] property is true ‚Äî a delayed
  /// screen redraw command will be called.
  @protected
  T addChildAt<T extends NodeUx>(int index, T child, {bool needsBuild = true}) {
    _children.insert(index, child);
    child._parent = this;
    child._registerID();
    if (needsBuild) {
      markNeedsBuild();
    }
    return child;
  }

  @protected
  NodeUx remove({bool notify = true}) {
    if (_parent == null) return this as NodeUx;

    final parent = _parent;
    parent?._children.remove(this);
    _parent = null;

    _removeID();
    if (notify) {
      parent?.markNeedsBuild();
    }
    _onRemoved(this as NodeUx);
    return this as NodeUx;
  }

  /// –°–æ–±—ã—Ç–∏–µ, –≤—ã–∑—ã–≤–∞–µ–º–æ–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–∑–ª–∞ –∏–∑ –¥–µ—Ä–µ–≤–∞.
  ///
  /// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è —É —É–¥–∞–ª—è–µ–º–æ–≥–æ —É–∑–ª–∞ –∏ –≤—Å–µ—Ö –µ–≥–æ –ø–æ—Ç–æ–º–∫–æ–≤.
  ///
  /// @param [NodeUx] [removedNode] ‚Äî –≤–µ—Ä—Ö–Ω–∏–π —É–∑–µ–ª
  /// —É–¥–∞–ª–µ–Ω–Ω–æ–π –≤–µ—Ç–∫–∏ —É–∑–ª–æ–≤.
  ///
  /// @return [void]
  ///
  /// –≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ —É–¥–æ–±–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è
  /// memory leaks –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–∑–ª–æ–≤ –∏–∑ –¥–µ—Ä–µ–≤–∞ ‚Äî –º–æ–∂–Ω–æ
  /// –≤—ã–∫–ª—é—á–∏—Ç—å —Ç–∞–π–º–µ—Ä—ã, –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π,
  /// –∏ –¥—Ä—É–≥–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
  ///
  /// –ù–µ —Ç—Ä–µ–±—É–µ—Ç –≤—ã–∑–æ–≤–∞ super. [onRemoved] ().
  ///
  /// ```dart
  ///   @override
  ///   void onRemoved(NodeUx removedNode) {
  ///     removeListener(someHandler);
  ///     someTimer?.cancel();
  ///   }
  /// ```
  ///
  @protected
  void onRemoved(NodeUx removedNode) {}

  void _onRemoved(NodeUx removedNode) {
    _children.forEach((_NodeUx child) => child._onRemoved(removedNode));
    onRemoved(removedNode);
  }

  @protected
  NodeUx? removeChildAt(int childIndex) => getChildAt(childIndex)?.remove();

  @protected
  List<NodeUx> removeChildren({bool notify = true}) {
    List<NodeUx> removedNodes = [..._children];
    while (isNotEmpty) {
      lastChild?.remove(notify: false);
    }
    if (notify) {
      markNeedsBuild();
    }
    return removedNodes;
  }

  //  üìå ‚ñö‚ñö‚ñö‚ñö‚ñö  OPENED CONTROL  ‚ñö‚ñö‚ñö‚ñö‚ñö  üìå

  /// –û—Ç–∫—Ä—ã—Ç—ã–π –¥–æ—á–µ—Ä–Ω–∏–π —É–∑–µ–ª
  NodeUx? _openedChild;

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∑–ª–∞ –æ—Ç–∫—Ä—ã—Ç/–∑–∞–∫—Ä—ã—Ç
  @protected
  bool get isOpened => _parent == null || _parent?.openedChild == this || _parent is NodeUxGroup;

  @protected
  @mustCallSuper
  void open() {
    if (_parent == null) return;
    _parent!.openedChild = this as NodeUx;
  }

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–π –¥–æ—á–µ—Ä–Ω–∏–π —É–∑–µ–ª
  NodeUx? get openedChild {
    if (_children.isEmpty) return null;
    _openedChild ??= _children.first;
    return _openedChild as NodeUx;
  }

  /// –ó–∞–¥–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–π –¥–æ—á–µ—Ä–Ω–∏–π —É–∑–µ–ª
  @protected
  @mustCallSuper
  set openedChild(NodeUx? child) => _setOpenedChild(child);

  void _setOpenedChild(NodeUx? child, {bool notifyListeners = true}) {
    if (_openedChild == child || child == null) return;
    if (_openedChild != null) {
      _openedChild!.onClose();
      _openedChild!._onBranchClose();
      _openedChild!._setProperty(OPENED, _FALSE, notifyListeners: false);
    }
    _openedChild = child;
    child._onBranchOpen();
    child._setProperty(OPENED, _TRUE, notifyListeners: notifyListeners);
  }

  void _onBranchOpen([NodeUx? openedAncestor]) {
    if (!isBranchOpened) return;
    _NodeUx? visitor = openedChild;
    while (visitor != null) {
      visitor.onBranchOpen(openedAncestor ?? this as NodeUx);
      visitor = visitor.openedChild;
    }
  }

  /// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≤–µ—Ç–∫–∏ (–Ω–æ –Ω–µ —Å–µ–±—è)
  @protected
  void onBranchOpen(NodeUx openedAncestor) {}

  /// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —É–∑–ª–∞
  @protected
  void onClose() {}

  /// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–µ—Ç–∫–∏ (–Ω–æ –Ω–µ —Å–µ–±—è)
  @protected
  void onBranchClose(NodeUx closedAncestor) {}

  /// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–µ—Ç–∫–∏ (–Ω–æ –Ω–µ —Å–µ–±—è)
  void _onBranchClose([NodeUx? closedAncestor]) {
    if (!isBranchOpened) return;
    _NodeUx? visitor = openedChild;
    while (visitor != null) {
      visitor.onBranchClose(closedAncestor ?? this as NodeUx);
      visitor = visitor.openedChild;
    }
  }

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ —É–∑–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ—Ç–∫—Ä—ã—Ç–æ–π –≤–µ—Ç–∫–µ
  @protected
  bool get isBranchOpened {
    _NodeUx? visitor = _parent;
    while (visitor != null) {
      if (!visitor.isOpened) return false;
      visitor = visitor._parent;
    }
    return true;
  }

  /// –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤—Å—é –≤–µ—Ç–∫—É –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞ –≤–≤–µ—Ä—Ö –¥–æ root
  @protected
  void openBranch() {
    if (_parent == null) {
      _setProperty(OPENED, _TRUE, notifyListeners: true);
      return;
    }
    _parent?._setOpenedChild(this as NodeUx, notifyListeners: false);
    _parent?.openBranch();
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤ –ø–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –≤–Ω–∏–∑ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞.

  @protected
  List<NodeUx> openedDescendants() {
    final List<NodeUx> result = [];
    NodeUx? visitor = openedChild;
    while (visitor != null) {
      result.add(visitor);
      visitor = visitor.openedChild;
    }
    return result;
  }

  //  üìå ‚ñö‚ñö‚ñö‚ñö‚ñö  OTHER PROPERTIES  ‚ñö‚ñö‚ñö‚ñö‚ñö  üìå

  void _setProperty(String name, String value, {bool notifyListeners = true}) {
    _props[name] = value;
    if (notifyListeners || name == OPENED) {
      markNeedsBuild();
    }
  }

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ –∏–º–µ–Ω–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞, —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ
  /// –≤ –æ–±—ä–µ–∫—Ç–µ _props —Ç–µ–∫—É—à–µ–≥–æ —É–∑–ª–∞ JSON –¥–æ–∫—É–º–µ–Ω—Ç–∞.
  @protected
  String? getProperty(String name) => _props[name];

  /// –ì–ª—É–±–∏–Ω–∞ —É–∑–ª–∞ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –¥–µ—Ä–µ–≤–∞
  @protected
  int get depth => (_parent?.depth ?? -1) + 1;

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å–∏–º–≤–æ–ª–æ–≤ \t –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º
  /// –≥–ª—É–±–∏–Ω–µ [depth] —É–∑–ª–∞ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –¥–µ—Ä–µ–≤–∞.
  @protected
  String get tabs => '${(_parent?.tabs ?? '')}\t';

  //  üìå ‚ñö‚ñö‚ñö‚ñö‚ñö  MARK NEEDS BUILD  ‚ñö‚ñö‚ñö‚ñö‚ñö  üìå

  /// boolean —Å–≤–æ–π—Å—Ç–≤–æ, —É–∫–∞–∑—ã–≤–∞—é—â–µ–µ, –±—ã–ª–æ –ª–∏ –ø–æ–º–µ—á–µ–Ω–æ –¥–µ—Ä–µ–≤–æ
  /// –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏.
  bool get dirty => root._dirty;
  bool _dirty = false;

  /// –£–∫–∞–∑–∞–Ω–∏–µ –¥–µ—Ä–µ–≤—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏.
  void markNeedsBuild() {
    if (root._blockers.contains(runtimeType)) {
      /// –ï—Å–ª–∏ —Ö–æ—á–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å—Å—è —É–∑–µ–ª, –∫–æ—Ç–æ—Ä—ã–π –¥–æ —ç—Ç–æ–≥–æ —Å—Ç–∞–≤–∏–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫—É,
      /// —Ç–æ –∞–≤—Ç–æ–º–∞—Ç–æ–º –¥–ª—è —É–¥–∞–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      root._blockers.remove(runtimeType);
    }
    root._markNeedsBuild();
  }

  void _markNeedsBuild() {
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ—Å–∏–ª "–∑–∞–º–æ—Ä–æ–∑–∏—Ç—å" –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫—É
    if (_blockers.isNotEmpty) {
      return;
    }
    if (dirty) return;
    _dirty = true;
    Future(() {
      _dirty = false;

      final treeUxListener = root._treeUxListener;
      if (treeUxListener != null) {
        treeUxListener();
      }
    });
  }

  BuildContext? _buildContext;

  void clearBuildContext() => _buildContext = null;

  void updateBuildContext(BuildContext context) => _buildContext = context;

  @protected
  BuildContext? get buildContext => _buildContext ?? _parent?.buildContext ?? _adaptor?.buildContext;

  /// –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–æ–∫
  final Set<Type> _blockers = {};

  /// –ò–∑ –Ω–æ–¥—ã –±–ª–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
  ///
  /// –ú–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –Ω–∞ —Ñ–æ–Ω–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è, –∞ —Ç–µ–∫—É—â–∏–π –≤–∏–¥–∂–µ—Ç –∑–∞–≤—è–∑–∞–Ω –Ω–∞ [BuildContext]
  /// –ù–∞–ø—Ä–∏–º–µ—Ä, –≤ –∫–æ–¥–µ –µ—Å—Ç—å [Navigator.pop], –∞ –Ω–∞ —Ñ–æ–Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª side-effect –∏ –≤—ã–¥–∞–ª –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ,
  /// –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å [_NodeUx.markNeedsBuild]
  void preventReBuild() {
    root._blockers.add(runtimeType);
  }

  //  üìå ‚ñö‚ñö‚ñö‚ñö‚ñö  TO DO  ‚ñö‚ñö‚ñö‚ñö‚ñö  üìå

  /// TODO ‚Äî —Å–¥–µ–ª–∞—Ç—å library —Ç–∏–ø PAGE
  /// –Ω–µ—Ç, –±–æ—Ç–≤–∞, –≤—Ä–æ–¥–µ –Ω–µ —Ç–∞–∫ —ç—Ç–æ –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å
  @protected
  T? getPage<T extends NodeUx>() {
    if (getProperty(PAGE) != null) {
      if (runtimeType == T) return this as T;
    }
    return _parent?.getPage();
  }
}

//  üìå ‚ñö‚ñö‚ñö‚ñö‚ñö‚ñö‚ñö‚ñö‚ñö‚ñö  NodeUx  ‚ñö‚ñö‚ñö‚ñö‚ñö‚ñö‚ñö‚ñö‚ñö‚ñö  üìå

abstract class NodeUx<ParentType extends _NodeUx> extends _NodeUx {
  static const String _TRUE = 'true';

  static final TreeUxLibrary _treeUxLibrary = TreeUxLibrary();

  static late Map<String, NodeUxBuilder> _buildersMap;

  Function? _treeUxListener;

  //  üìå ‚ñö‚ñö‚ñö‚ñö‚ñö  CREATION ‚ñö‚ñö‚ñö‚ñö‚ñö  üìå

  /// –°–æ–∑–¥–∞–µ—Ç NodeUx-–¥–µ—Ä–µ–≤–æ
  factory NodeUx.createTree(Map<String, dynamic> treeUxMap, Map<String, NodeUxBuilder> buildersMap) {
    _buildersMap = buildersMap;
    _treeUxLibrary.registerLibraryItems(treeUxMap);
    final treeUxRoot = TreeUxRoot(treeUxMap);
    return _createNode(treeUxRoot) as NodeUx<ParentType>;
  }

  /// –°–æ–∑–¥–∞–µ—Ç —É–∑–µ–ª
  static NodeUx<_NodeUx> _createNode(NodeUx parent) {
    Map<String, dynamic>? treeUx = parent._tempMap;
    String builderName = treeUx?[TYPE] ?? 'no builder name';
    final NodeUxBuilder? builder = _buildersMap[builderName];
    if (builder == null) {
      throw ErrorUx('‚õî [NodeUx].NodeUx._createNode([parent]) no builder for $builderName');
    }
    return builder(parent);
  }

  /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
  NodeUx(ParentType? parent) {
    if (parent == null || ParentType == _NodeUx) {
      print('‚õî [NodeUx]([data, parent]) \n');
      print('\t\terror:    class $runtimeType<$ParentType>');
      print('\t\texpected: class $runtimeType<${parent.runtimeType}>');
    } else {
      _initInstance(parent._tempMap, parent);
    }
  }

  /// –°–æ–∑–¥–∞–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ—á–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
  @protected
  NodeUx.create(String libraryType, {ParentType? parent, ParentType? adaptor}) {
    _initInstance(_treeUxLibrary.getLibraryItem(libraryType), parent).._adaptor = adaptor;
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
  NodeUx<ParentType> _initInstance(Map<String, dynamic>? data, ParentType? parent) {
    parent?.addChild(this);
    if (data == null || data.isEmpty) return this;

    _nodeType = data[TYPE];

    _createProps(data);
    _registerID();
    _createChildren(data);
    if (getProperty(OPENED) == _TRUE) {
      open();
    }
    return this;
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤.
  /// –í —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å, –¥–æ—á–µ—Ä–Ω–∏–µ —É–∑–ª—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  /// [_initInstance] —Å–æ–∑–¥–∞–¥—É—Ç —Å–≤–æ–∏ –¥–æ—á–µ—Ä–Ω–∏–µ —É–∑–ª—ã.
  void _createChildren(Map<String, dynamic> data) {
    if (data[CHILDREN] == null) return;
    final childrenList = data[CHILDREN] as List<dynamic>;
    childrenList.forEach((dynamic child) {
      _tempMap = child;
      _createNode(this);
    });
    _tempMap = null;
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤
  void _createProps(Map<String, dynamic> data) {
    data[PROPS]?.forEach((key, value) => _props[key] = value);
  }

  //  üìå ‚ñö‚ñö‚ñö‚ñö‚ñö  SERIALIZATION  ‚ñö‚ñö‚ñö‚ñö‚ñö  üìå

  Map<dynamic, dynamic> toMap() {
    Map<dynamic, dynamic> map = {};
    map[TYPE] = _nodeType;
    map[PROPS] = _props;
    map[PROPS][PATH] = path;
    map[PROPS][DEPTH] = depth.toString();
    if (isNotEmpty) {
      map[CHILDREN] = _childrenToList();
    }
    return map;
  }

  List<Map> _childrenToList() {
    final List<Map> result = [];
    for (int i = 0; i < _children.length; i++) {
      result.add(_children[i].toMap());
    }
    return result;
  }

  @override
  String toString() => jsonEncode(toMap());

  void printNode() {
    print('$tabs $depth $_nodeType');
    for (int i = 0; i < _children.length; i++) {
      _children[i].printNode();
    }
  }

  //  üìå ‚ñö‚ñö‚ñö‚ñö‚ñö  HIERARCHY  ‚ñö‚ñö‚ñö‚ñö‚ñö  üìå

  @protected
  ParentType? get parent => _parent as ParentType;

  @protected
  ParentType get adaptor => _adaptor as ParentType;

//  üìå ‚ñö‚ñö‚ñö‚ñö‚ñö  EVENTS  ‚ñö‚ñö‚ñö‚ñö‚ñö  üìå

  void setTreeUxListener(Function onRedraw) {
    if (this != root) {
      root.setTreeUxListener(onRedraw);
      return;
    }
    _treeUxListener = onRedraw;
  }

  //  üìå ‚ñö‚ñö‚ñö‚ñö‚ñö  VIEW  ‚ñö‚ñö‚ñö‚ñö‚ñö  üìå

  ProviderUx get providerUx => ProviderUx(this);

  /// –ú–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è View –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞.
  ViewUx createView();

  // –ü–æ–ª—É—á–µ–Ω–∏–µ View —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞
  ViewUx? get openedChildView => openedChild?.createView();
}

class TreeUxRoot extends NodeUx {
  // TreeUxRoot(Map<String, dynamic> data) : super(null) {
  TreeUxRoot(Map<String, dynamic> data) : super(null) {
    _tempMap = data;
    Future(() => _tempMap = null);
  }

  @override
  ViewUx createView() => throw ErrorUx('TreeUxRoot have not view');

  @override
  @protected
  NodeUx get root => _children[0];

  @protected
  @override
  String get path => '/';

  @protected
  @override
  NodeUx get firstSibling => this;

  @protected
  @override
  NodeUx get lastSibling => this;

  @protected
  @override
  NodeUx? get prevSibling => null;

  /// Next sibling node
  @protected
  @override
  NodeUx? get nextSibling => null;

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —É–∑–ª–∞ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –≤—ã—à–µ –ø–æ –µ–≥–æ –∫–ª–∞—Å—Å—É [T].
  @override
  T? getTypedAncestor<T extends NodeUx>() => this is T ? this as T : null;

  @protected
  @override
  NodeUx? getAncestorByType(Type type) => runtimeType == type ? this as NodeUx : null;

  @protected
  @override
  NodeUx? getAncestorByNodeType(String type) => _nodeType == type ? this as NodeUx : null;

  @protected
  @override
  NodeUx remove({bool notify = true}) {
    return this;
  }
}

abstract class NodeUxGroup<ParentType extends NodeUx> extends NodeUx {
  NodeUxGroup(NodeUx parent) : super(parent);

  @override
  NodeUx? get openedChild => null;

  @override
  void _setOpenedChild(NodeUx? child, {bool notifyListeners = true}) {}

  @override
  void _onBranchOpen([NodeUx? openedAncestor]) {
    if (!isBranchOpened) return;
    onBranchOpen(openedAncestor ?? this);
    for (int i = 0; i < _children.length; i++) {
      _children[i]._onBranchOpen(openedAncestor ?? this);
    }
  }

  /// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–µ—Ç–∫–∏ (–Ω–æ –Ω–µ —Å–µ–±—è)
  @override
  @protected
  void onBranchClose(NodeUx closedAncestor) {}

  /// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–µ—Ç–∫–∏ (–Ω–æ –Ω–µ —Å–µ–±—è)
  @override
  void _onBranchClose([NodeUx? closedAncestor]) {
    if (!isBranchOpened) return;
    for (int i = 0; i < _children.length; i++) {
      _children[i]._onBranchClose(closedAncestor ?? this);
      _children[i].onBranchClose(closedAncestor ?? this);
    }
  }
}
